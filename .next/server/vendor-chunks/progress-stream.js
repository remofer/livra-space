/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/progress-stream";
exports.ids = ["vendor-chunks/progress-stream"];
exports.modules = {

/***/ "(ssr)/./node_modules/progress-stream/index.js":
/*!***********************************************!*\
  !*** ./node_modules/progress-stream/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var through = __webpack_require__(/*! through2 */ \"(ssr)/./node_modules/through2/through2.js\");\nvar speedometer = __webpack_require__(/*! speedometer */ \"(ssr)/./node_modules/speedometer/index.js\");\n\nmodule.exports = function(options, onprogress) {\n\tif (typeof options === 'function') return module.exports(null, options);\n\toptions = options || {};\n\n\tvar length = options.length || 0;\n\tvar time = options.time || 0;\n\tvar drain = options.drain || false;\n\tvar transferred = options.transferred || 0;\n\tvar nextUpdate = Date.now()+time;\n\tvar delta = 0;\n\tvar speed = speedometer(options.speed || 5000);\n\tvar startTime = Date.now();\n\n\tvar update = {\n\t\tpercentage: 0,\n\t\ttransferred: transferred,\n\t\tlength: length,\n\t\tremaining: length,\n\t\teta: 0,\n\t\truntime: 0\n\t};\n\n\tvar emit = function(ended) {\n\t\tupdate.delta = delta;\n\t\tupdate.percentage = ended ? 100 : (length ? transferred/length*100 : 0);\n\t\tupdate.speed = speed(delta);\n\t\tupdate.eta = Math.round(update.remaining / update.speed);\n\t\tupdate.runtime = parseInt((Date.now() - startTime)/1000);\n\t\tnextUpdate = Date.now()+time;\n\n\t\tdelta = 0;\n\n\t\ttr.emit('progress', update);\n\t};\n\tvar write = function(chunk, enc, callback) {\n\t\tvar len = options.objectMode ? 1 : chunk.length;\n\t\ttransferred += len;\n\t\tdelta += len;\n\t\tupdate.transferred = transferred;\n\t\tupdate.remaining = length >= transferred ? length - transferred : 0;\n\n\t\tif (Date.now() >= nextUpdate) emit(false);\n\t\tcallback(null, chunk);\n\t};\n\tvar end = function(callback) {\n\t\temit(true);\n\t\tcallback();\n\t};\n\n\tvar tr = through(options.objectMode ? {objectMode:true, highWaterMark:16} : {}, write, end);\n\tvar onlength = function(newLength) {\n\t\tlength = newLength;\n\t\tupdate.length = length;\n\t\tupdate.remaining = length - update.transferred;\n\t\ttr.emit('length', length);\n\t};\n\t\n\t// Expose `onlength()` handler as `setLength()` to support custom use cases where length\n\t// is not known until after a few chunks have already been pumped, or is\n\t// calculated on the fly.\n\ttr.setLength = onlength;\n\t\n\ttr.on('pipe', function(stream) {\n\t\tif (typeof length === 'number') return;\n\t\t// Support http module\n\t\tif (stream.readable && !stream.writable && stream.headers) {\n\t\t\treturn onlength(parseInt(stream.headers['content-length'] || 0));\n\t\t}\n\n\t\t// Support streams with a length property\n\t\tif (typeof stream.length === 'number') {\n\t\t\treturn onlength(stream.length);\n\t\t}\n\n\t\t// Support request module\n\t\tstream.on('response', function(res) {\n\t\t\tif (!res || !res.headers) return;\n\t\t\tif (res.headers['content-encoding'] === 'gzip') return;\n\t\t\tif (res.headers['content-length']) {\n\t\t\t\treturn onlength(parseInt(res.headers['content-length']));\n\t\t\t}\n\t\t});\n\t});\n\n\tif (drain) tr.resume();\n\tif (onprogress) tr.on('progress', onprogress);\n\n\ttr.progress = function() {\n\t\tupdate.speed = speed(0);\n\t\tupdate.eta = Math.round(update.remaining / update.speed);\n\n\t\treturn update;\n\t};\n\treturn tr;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvZ3Jlc3Mtc3RyZWFtL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQywyREFBVTtBQUNoQyxrQkFBa0IsbUJBQU8sQ0FBQyw4REFBYTs7QUFFdkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdDQUF3QyxtQ0FBbUMsSUFBSTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9ncmVzcy1zdHJlYW0vaW5kZXguanM/ZTJkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdGhyb3VnaCA9IHJlcXVpcmUoJ3Rocm91Z2gyJyk7XG52YXIgc3BlZWRvbWV0ZXIgPSByZXF1aXJlKCdzcGVlZG9tZXRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9wdGlvbnMsIG9ucHJvZ3Jlc3MpIHtcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSByZXR1cm4gbW9kdWxlLmV4cG9ydHMobnVsbCwgb3B0aW9ucyk7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdHZhciBsZW5ndGggPSBvcHRpb25zLmxlbmd0aCB8fCAwO1xuXHR2YXIgdGltZSA9IG9wdGlvbnMudGltZSB8fCAwO1xuXHR2YXIgZHJhaW4gPSBvcHRpb25zLmRyYWluIHx8IGZhbHNlO1xuXHR2YXIgdHJhbnNmZXJyZWQgPSBvcHRpb25zLnRyYW5zZmVycmVkIHx8IDA7XG5cdHZhciBuZXh0VXBkYXRlID0gRGF0ZS5ub3coKSt0aW1lO1xuXHR2YXIgZGVsdGEgPSAwO1xuXHR2YXIgc3BlZWQgPSBzcGVlZG9tZXRlcihvcHRpb25zLnNwZWVkIHx8IDUwMDApO1xuXHR2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblxuXHR2YXIgdXBkYXRlID0ge1xuXHRcdHBlcmNlbnRhZ2U6IDAsXG5cdFx0dHJhbnNmZXJyZWQ6IHRyYW5zZmVycmVkLFxuXHRcdGxlbmd0aDogbGVuZ3RoLFxuXHRcdHJlbWFpbmluZzogbGVuZ3RoLFxuXHRcdGV0YTogMCxcblx0XHRydW50aW1lOiAwXG5cdH07XG5cblx0dmFyIGVtaXQgPSBmdW5jdGlvbihlbmRlZCkge1xuXHRcdHVwZGF0ZS5kZWx0YSA9IGRlbHRhO1xuXHRcdHVwZGF0ZS5wZXJjZW50YWdlID0gZW5kZWQgPyAxMDAgOiAobGVuZ3RoID8gdHJhbnNmZXJyZWQvbGVuZ3RoKjEwMCA6IDApO1xuXHRcdHVwZGF0ZS5zcGVlZCA9IHNwZWVkKGRlbHRhKTtcblx0XHR1cGRhdGUuZXRhID0gTWF0aC5yb3VuZCh1cGRhdGUucmVtYWluaW5nIC8gdXBkYXRlLnNwZWVkKTtcblx0XHR1cGRhdGUucnVudGltZSA9IHBhcnNlSW50KChEYXRlLm5vdygpIC0gc3RhcnRUaW1lKS8xMDAwKTtcblx0XHRuZXh0VXBkYXRlID0gRGF0ZS5ub3coKSt0aW1lO1xuXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdFx0dHIuZW1pdCgncHJvZ3Jlc3MnLCB1cGRhdGUpO1xuXHR9O1xuXHR2YXIgd3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jLCBjYWxsYmFjaykge1xuXHRcdHZhciBsZW4gPSBvcHRpb25zLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXHRcdHRyYW5zZmVycmVkICs9IGxlbjtcblx0XHRkZWx0YSArPSBsZW47XG5cdFx0dXBkYXRlLnRyYW5zZmVycmVkID0gdHJhbnNmZXJyZWQ7XG5cdFx0dXBkYXRlLnJlbWFpbmluZyA9IGxlbmd0aCA+PSB0cmFuc2ZlcnJlZCA/IGxlbmd0aCAtIHRyYW5zZmVycmVkIDogMDtcblxuXHRcdGlmIChEYXRlLm5vdygpID49IG5leHRVcGRhdGUpIGVtaXQoZmFsc2UpO1xuXHRcdGNhbGxiYWNrKG51bGwsIGNodW5rKTtcblx0fTtcblx0dmFyIGVuZCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0ZW1pdCh0cnVlKTtcblx0XHRjYWxsYmFjaygpO1xuXHR9O1xuXG5cdHZhciB0ciA9IHRocm91Z2gob3B0aW9ucy5vYmplY3RNb2RlID8ge29iamVjdE1vZGU6dHJ1ZSwgaGlnaFdhdGVyTWFyazoxNn0gOiB7fSwgd3JpdGUsIGVuZCk7XG5cdHZhciBvbmxlbmd0aCA9IGZ1bmN0aW9uKG5ld0xlbmd0aCkge1xuXHRcdGxlbmd0aCA9IG5ld0xlbmd0aDtcblx0XHR1cGRhdGUubGVuZ3RoID0gbGVuZ3RoO1xuXHRcdHVwZGF0ZS5yZW1haW5pbmcgPSBsZW5ndGggLSB1cGRhdGUudHJhbnNmZXJyZWQ7XG5cdFx0dHIuZW1pdCgnbGVuZ3RoJywgbGVuZ3RoKTtcblx0fTtcblx0XG5cdC8vIEV4cG9zZSBgb25sZW5ndGgoKWAgaGFuZGxlciBhcyBgc2V0TGVuZ3RoKClgIHRvIHN1cHBvcnQgY3VzdG9tIHVzZSBjYXNlcyB3aGVyZSBsZW5ndGhcblx0Ly8gaXMgbm90IGtub3duIHVudGlsIGFmdGVyIGEgZmV3IGNodW5rcyBoYXZlIGFscmVhZHkgYmVlbiBwdW1wZWQsIG9yIGlzXG5cdC8vIGNhbGN1bGF0ZWQgb24gdGhlIGZseS5cblx0dHIuc2V0TGVuZ3RoID0gb25sZW5ndGg7XG5cdFxuXHR0ci5vbigncGlwZScsIGZ1bmN0aW9uKHN0cmVhbSkge1xuXHRcdGlmICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgcmV0dXJuO1xuXHRcdC8vIFN1cHBvcnQgaHR0cCBtb2R1bGVcblx0XHRpZiAoc3RyZWFtLnJlYWRhYmxlICYmICFzdHJlYW0ud3JpdGFibGUgJiYgc3RyZWFtLmhlYWRlcnMpIHtcblx0XHRcdHJldHVybiBvbmxlbmd0aChwYXJzZUludChzdHJlYW0uaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSB8fCAwKSk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydCBzdHJlYW1zIHdpdGggYSBsZW5ndGggcHJvcGVydHlcblx0XHRpZiAodHlwZW9mIHN0cmVhbS5sZW5ndGggPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gb25sZW5ndGgoc3RyZWFtLmxlbmd0aCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydCByZXF1ZXN0IG1vZHVsZVxuXHRcdHN0cmVhbS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihyZXMpIHtcblx0XHRcdGlmICghcmVzIHx8ICFyZXMuaGVhZGVycykgcmV0dXJuO1xuXHRcdFx0aWYgKHJlcy5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10gPT09ICdnemlwJykgcmV0dXJuO1xuXHRcdFx0aWYgKHJlcy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKSB7XG5cdFx0XHRcdHJldHVybiBvbmxlbmd0aChwYXJzZUludChyZXMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblxuXHRpZiAoZHJhaW4pIHRyLnJlc3VtZSgpO1xuXHRpZiAob25wcm9ncmVzcykgdHIub24oJ3Byb2dyZXNzJywgb25wcm9ncmVzcyk7XG5cblx0dHIucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcblx0XHR1cGRhdGUuc3BlZWQgPSBzcGVlZCgwKTtcblx0XHR1cGRhdGUuZXRhID0gTWF0aC5yb3VuZCh1cGRhdGUucmVtYWluaW5nIC8gdXBkYXRlLnNwZWVkKTtcblxuXHRcdHJldHVybiB1cGRhdGU7XG5cdH07XG5cdHJldHVybiB0cjtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/progress-stream/index.js\n");

/***/ })

};
;